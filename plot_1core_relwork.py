# Default, Davare v1, Micaela, Ours

collisions = [7, 5, 4, 1]
opt_total_Area = 339142.0
# areas = [ [339229.0, 338239.0, 273006.0, 254767.0, 338862.0, 271313.0, 315417.0, 249723.0, 339142.0, 146794.0] , [247811.0, 279038.0, 146973.0, 145837.0, 166399.0, 146687.0, 146244.0, 147274.0, 148311.0, 163409.0], [109857.0, 156443.0, 155355.0, 147342.0, 154535.0, 138771.0, 154535.0, 124158.0, 150829.0, 153762.0] ]
# times = [  [235.20903599999147, 200.22927899999777, 91.14499899998773, 105.53088299997617, 212.02056299997494, 101.34377099999111, 171.17414300001693, 84.73263499999885, 245.06666800001986, 16.67479699999094] , 
# [85.26491699999897, 130.58925599999785, 16.908712999995622, 14.853540999995312, 56.474477999994996, 15.447604999999749, 15.440546999996878, 31.28545900000463, 21.052624999995167, 52.06491999999562], 
 # [65.05642399998615, 269.6325599999749, 240.01408499995014, 195.01331999994582, 210.08221900000936, 324.75399299999697, 265.0138899999787, 60.010611999989486, 324.7341979999677, 200.01563499999466] ]

times_60p_area = [ [199.53735700000016, 53.0642170000001, 81.90594799999963, 95.2982379999994, 96.30445299999974, 51.49310399999922, 132.75838199999998, 93.104972000001, 99.49724799999967, 80.49328799999967], [72.99073700001463, 61.92466100002639, 56.7752389999805, 62.44572600000538, 56.660490999987815, 72.06415099999867, 61.44396800000686, 61.47628199995961, 67.76897899998585, 64.39001500001177], [120.30288000000292, 140.74359600000025, 130.31238499999745, 105.77591199999733, 162.29130900000018, 137.04887900000176], [81.74145999999973, 66.69185700000003, 64.61262300000044, 61.71393900000021, 60.04459399999996, 64.70833799999991, 59.95007399999986, 89.34303199999977, 64.97507599999972] ]

full_expl_counts = [ 4, 7, 0, 7] # counted as total area and navigator said finished.

rt_cc_75iles = [ [0.35435924999999996, 0.344524, 0.352717, 0.35043800000000003, 0.35296725000000001, 0.35394425000000002, 0.35168900000000003, 0.3497825, 0.35403450000000003, 0.34859899999999999], [0.28366975, 0.28535900000000003, 0.28437049999999997, 0.28332500000000005, 0.28451900000000002, 0.29900300000000002, 0.28412999999999999, 0.2870665, 0.28859299999999999, 0.28456425000000002], [0.53876500000000005, 0.54718424999999993, 0.57951700000000006, 0.75111574999999997, 0.78388075000000002, 0.60497425000000005, 0.74590850000000009], [0.075623999999999997, 0.077679499999999999, 0.075798000000000004, 0.077273999999999995, 0.076538749999999989, 0.077737000000000001, 0.075539499999999996, 0.076279, 0.077438000000000007, 0.076908749999999998] ]

rt_s_mc_nc_lp_75iles = [ [1.3175155000000001, 1.3713347499999999, 1.3935325000000001, 1.3809090000000002, 1.4268995, 1.461171, 1.366069, 1.457144, 1.378336, 1.4137660000000001], [1.9121604999999999, 1.9319462500000002, 1.920579, 1.9337260000000001, 1.9319757500000001, 1.9435220000000002, 1.9374595000000001, 1.927826, 1.977754, 1.9351940000000001], [2.729962, 2.8319757499999998, 2.7228270000000001, 2.8455044999999997, 2.7101069999999998, 2.8604502499999995, 2.8424697499999998, 2.8027820000000001, 2.7131050000000001, 2.7414940000000003], [1.9836877499999999, 1.98785425, 1.9961514999999999, 1.9812555000000001, 1.9881450000000003, 2.0027180000000002, 1.98823825, 1.9419489999999999, 1.976772, 1.9387650000000001]]

rt_s_mc_np_nc_lp_75iles = [ [4.2930542500000008, 4.0344757499999995, 4.1338049999999997, 4.3198842499999994, 4.1554535000000001, 4.1764802499999991, 4.52043675, 4.5529520000000003, 4.1320005000000002, 4.3949560000000005], [2.3240595000000002, 2.4787599999999999, 2.4385797500000002, 2.4660349999999998, 2.4614250000000002, 2.376808, 2.4801865000000003, 2.4576440000000002, 2.5328979999999999, 2.4871825000000003], [3.5084504999999995, 3.6053320000000002, 3.6959789999999995, 3.2729360000000001, 3.71963, 3.3035917499999998, 3.9303059999999999, 3.708272, 3.5928244999999999, 3.5398664999999996], [2.6548435000000001, 2.6833170000000002, 2.7211894999999999, 2.5849479999999998, 2.6040682500000001, 2.673257, 2.6199370000000002, 2.4401267500000001, 2.6680505000000001, 2.6121290000000004]]

rt_longest_75iles = [ [4.2930542500000008, 4.0076204999999998, 4.1242150000000004, 4.3095400000000001, 4.1554535000000001, 4.1764802499999991, 4.52043675, 4.4926589999999997, 4.1320005000000002, 4.3868877499999996], [3.0090970000000001, 3.1658575, 3.1850292499999999, 3.1528879999999999, 3.1595162499999998, 3.0223402499999996, 3.0890227499999998, 3.0737709999999998, 3.2440359999999999, 3.0618539999999999], [7.4723604999999997, 7.5109440000000003, 7.62794975, 7.3446809999999996, 7.4390450000000001, 12.49530375, 7.9045357500000009, 7.5210550000000005, 7.4988999999999999, 7.4569274999999999], [3.62878575, 3.6347322499999999, 3.691255, 3.6966005000000002, 3.5754942499999998, 3.65750975, 3.5947895000000001, 3.496864, 3.6904940000000002, 3.6018299999999996]]

# What about Slow: Time Limit of 5min.

# area_in_first10 = [ [20425.0, 18453.0, 21643.0, 17377.0, 20118.0, 19565.0, 21025.0, 20985.0, 12097.0, 19089.0] , [20970.0, 16334.0, 21445.0, 22043.0, 17088.0, 21534.0, 21652.0, 15176.0, 16183.0, 19319.0], [40579.0, 23924.0, 31457.0, 35114.0, 28502.0, 33401.0, 30394.0, 31768.0, 35465.0, 31920.0] ]

# Area in first10 is weird....
import numpy as np

def plot_bars(arr, yl, titl, ticks, ylim=0, ct=[]):
	print("Plotting ", titl, arr, ticks)
	ngroups = len(arr)
	fig, ax = plt.subplots()
	index = np.arange(ngroups)
	bar_width = 0.3
	opacity = 0.5
	plt.bar(index, arr, alpha=opacity, color='b', label=titl, width=bar_width)
	plt.ylabel(yl,fontsize=16)
	plt.ylim(0,ylim)
	if len(ct) > 0:
		print("Got count array: ", ct)
		for i in range(len(arr)):
			plt.text(index[i]+bar_width/3,min(arr)/2, str(ct[i]),fontsize=16)
	plt.title(titl,fontsize=16)
	plt.xticks(index, ticks,fontsize=16)
	plt.show()
	# plt.savefig(titl + ".png")

import matplotlib.pyplot as plt

# plt.style.use('plot_style.mplstyle')

# RTs:
med_rt_cc = [ np.median(x) for x in rt_cc_75iles ] # median of 75ile RTs.
med_rt_s_mc_nc_lp = [ np.median(x) for x in rt_s_mc_nc_lp_75iles ]
med_rt_s_mc_np_nc_lp = [ np.median(x) for x in rt_s_mc_np_nc_lp_75iles ]
med_long = [ np.median(x) for x in rt_longest_75iles]
plot_bars(med_rt_cc, "Scan-LC-LP RT (s)", "Scan-LC-LP Response Time", ["Default", "Davare", "Verucchi", "Fractional"], ylim=max(med_rt_cc))
plot_bars(med_rt_s_mc_nc_lp, "Scan-GML-NC-LP RT (s)", "Scan-GML-NC-LP Response Time", ["Default", "Davare", "Verucchi", "Fractional"], ylim=max(med_rt_s_mc_nc_lp))
plot_bars(med_rt_s_mc_np_nc_lp, "Scan-GML-GP-NC-LP RT (s)", "Scan-GML-GP-NC-LP Response Time", ["Default", "Davare", "Verucchi", "Fractional"], ylim=max(med_rt_s_mc_np_nc_lp))
plot_bars(med_long, "Scan-GML-GM-GP-NC-LP RT (s)", "Scan-GML-GM-GP-NC-LP Response Time", ["Default", "Davare", "Verucchi", "Fractional"], ylim=max(med_long))

# Plot collision
plot_bars(collisions, "#Colln out of 10runs", "Collisions (in 10runs)", ["Default", "Davare", "Verucchi", "Fractional"], ylim=10)

# Rate of expl, as time to explore 60p Area
med_60parea = [np.median(x) for x in times_60p_area]
tail_60parea = [np.percentile(x,80) for x in times_60p_area ]
ct_60parea = [len(x) for x in times_60p_area]
plot_bars(med_60parea, "Time (s)", "Median time to cover 60p area", ["Default", "Davare", "Verucchi", "Fractional"], ylim=max(tail_60parea), ct=ct_60parea)

# Full expl counts
plot_bars(full_expl_counts, "#Times Robot Explored Full MapArea", "#Successful Runs", ["Default", "Davare", "Verucchi", "Fractional"], ylim=10)

# Plot 
# s_totalAreas = [sorted(x) for x in areas]
# med_totalAreas = [ x[len(x)/2]/opt_total_Area for x in s_totalAreas ]
# tail_totalAreas = [ x[len(x)-2]/opt_total_Area for x in s_totalAreas]
# plot_bars(med_totalAreas, "Median Proportion of Area Covered", "Median TotalArea", ["AllHigh", "Default", "AllLow"])
# plot_bars(tail_totalAreas, "Tail Area Proportion", "Tail TotalArea", ["AllHigh", "Default", "AllLow"])

# # Area/time:
# area_by_time = [[], [], []]
# for i in range(len(areas)):
# 	for j in range(len(areas[i])):
# 		area_by_time[i].append( areas[i][j]/times[i][j] )
# print(area_by_time)

# s_abt = [sorted(x) for x in area_by_time]
# med_abt = [ x[len(x)/2] for x in s_abt]
# # Ad-hoc constraints.
# plot_bars(med_abt, "Area covered/Time", "TotalArea_Time", ["AllHigh", "Default", "AllLow"])
# # if a run is bad, i.e. colln>Xc or area<Xa -> constraint on all.

# s_aFirst10 = [sorted(x) for x in area_in_first10]
# med_aFirst10 = [ x[len(x)/2] for x in s_aFirst10]
# plot_bars(med_aFirst10, "Median Area Cov. in First 10s", "AreaFirst10s", ["AllHigh", "Default", "AllLow"])

